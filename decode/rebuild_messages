#!/bin/bash

if [ $# -ne 3 ]; then
    echo "Usage: $0 dir team sequence"
    exit 2
fi

dir="$1"
team="$2"
seq="$3"

function error_exit {
    echo "$1" >&2
    exit "${2:-1}"
}

command -v flock >/dev/null 2>&1 || error_exit "$0 requires flock"
command -v mktemp >/dev/null 2>&1 || error_exit "$0 requires mktemp"
command -v realpath >/dev/null 2>&1 || error_exit "$0 requires realpath"
command -v ./fraginfo >/dev/null 2>&1 || error_exit "$0 requires ./fraginfo"
command -v ./fragextract >/dev/null 2>&1 || error_exit "$0 requires ./fragextract"
FRAGINFO=$(realpath ./fraginfo)
FRAGEXTRACT=$(realpath ./fragextract)

[ -n "$dir" ] || error_exit "must specify root directory"
[[ $team =~ ^[0-9a-f]{16}$ ]] || error_exit "$team: invalid team identifier"
[[ $seq =~ ^[0-9]{10}$ ]] || error_exit "$seq: invalid sequence number"

cd "$dir" || exit 1

[ -d "$team" ] || error_exit "$team: directory not found"

# obtain lock on team directory
exec 200<"$team" || error_exit "$team: file descriptor could not be opened for reading"
flock 200 || error_exit "$team: unable to obtain lock"

[ -e "$team/fragments/done/$seq" ] && error_exit "fragment $team/$seq already finished processing"

if [ -s "$team/fragments/new/$seq" ]; then
    mkdir -p "$team/fragments/partial" || exit 1
    mv "$team/fragments/new/$seq" "$team/fragments/partial/$seq"
fi

[ -s "$team/fragments/partial/$seq" ] || error_exit "fragment $team/$seq not found"

function fragment_is_continuation {
    local team="$1"
    local seq="$2"
    local offset
    offset=$("$FRAGINFO" rawoffset "$team/fragments/partial/$seq")
    [ $? -eq 0 ] || error_exit "could not read offset of fragment $team/$seq"
    return $((offset==0))
}

function fragment_msg_starts {
    local team="$1"
    local seq="$2"
    local starts
    starts=$("$FRAGINFO" msgstarts "$team/fragments/partial/$seq")
    [ $? -eq 0 ] || error_exit "could not count message starts of fragment $team/$seq"
    echo $starts
    return 0
}

function prevseq {
    local seq=$((10#$1))
    printf "%010d\n" $((seq-1))
}

function nextseq {
    local seq=$((10#$1))
    printf "%010d\n" $((seq+1))
}

function check_done {
    local team=$1
    local seq=$2
    local recurse=${3-1}

    echo "check_done: $team/$seq"

    local current_fragment_done=1

    mkdir -p "$team/fragments/done" || exit 1

    if fragment_is_continuation $team $seq; then
        if [ ! -e "$team/messages/done/$seq.continuation" ]; then
            current_fragment_done=0
        fi
    fi

    local starts
    starts=$(fragment_msg_starts $team $seq)
    [ $? -eq 0 ] || exit 1

    local last_message_done

    local i
    for ((i=1; i<=starts; i++)); do
        msg=$(printf "%05d" $i)
        if [ -s "$team/messages/new/$seq.$msg" -o -s "$team/messages/done/$seq.$msg" ]; then
            last_message_done=1
        else
            current_fragment_done=0
            last_message_done=0
        fi
    done

    local span=0
    if ((recurse)) && ((starts>0)) && ((last_message_done)); then
        span=$("$FRAGINFO" msgspan "$team/fragments/partial" $seq $starts)
        if [ $? -ne 0 ]; then
            span=0
        fi
    fi

    if ((current_fragment_done)); then
        echo "done: $team/$seq"
        mv "$team/fragments/partial/$seq" "$team/fragments/done"
    fi

    ((span>1)) || return 0

    local next=$seq
    for ((i=2; i<=span; i++)); do
        next=$(nextseq "$next")
        check_done $team $next 0
    done
}

function rebuild_msg {
    local team=$1
    local seq=$2
    local msg=$3

    local msgpad=$(printf "%05d" $msg)

    [ -e "$team/messages/new/$seq.$msgpad" ] && { echo "warning: message $team/$seq.$msgpad already rebuilt" >&2; return 1; }
    [ -e "$team/messages/done/$seq.$msgpad" ] && { echo "warning: message $team/$seq.$msgpad alreay processed" >&2; return 1; }

    mkdir -p "$team/messages/tmp" || exit 1
    mkdir -p "$team/messages/new" || exit 1
    mkdir -p "$team/messages/done" || exit 1

    local tmp
    tmp=$(mktemp "$team/messages/tmp/$seq.$msgpad.XXXXXX")
    [ $? -eq 0 ] || exit 1

    "$FRAGEXTRACT" "$team/fragments/partial" $seq $msg > "$tmp"
    [ $? -eq 0 ] || { echo "warning: message $team/$seq.$msgpad could not be extracted" >&2; rm -f "$tmp"; return 1; }

    echo "extracted: $team/$seq.$msgpad"

    local span=$("$FRAGINFO" msgspan "$team/fragments/partial" $seq $msg)
    local next
    local i
    if [ $? -eq 0 ]; then
        next=$seq
        for ((i=2; i<=span; i++)); do
            next=$(nextseq "$next")
            touch "$team/messages/done/$next.continuation"
        done
    fi

    mv "$tmp" "$team/messages/new/$seq.$msgpad" || exit 1
    return 0
}

starts=$(fragment_msg_starts $team $seq)
[ $? -eq 0 ] || exit 1

if fragment_is_continuation $team $seq; then

    ((10#$seq==0)) && error_exit "$team/$seq should not be a continuation"

    # fixme this can be slow for heavily fragmented messages
    # maybe do some of this processing natively?

    startseq=$(prevseq $seq)
    startmsg=0
    while [ -s "$team/fragments/partial/$startseq" ]; do
        startmsg=$(fragment_msg_starts $team $startseq)
        [ $? -eq 0 ] || exit 1
        ((startmsg>0)) && break

        if ((10#$startseq==0)); then
            error_exit "$team/$startseq should start a message"
        fi

        startseq=$(prevseq $startseq)
    done

    if [ -s "$team/fragments/partial/$startseq" ]; then
        rebuild_msg $team $startseq $startmsg && check_done $team $startseq
    else
        echo "warning: missing prior fragment $team/$startseq" >&2
    fi
fi

for ((i=1; i<=starts; i++)); do
    rebuild_msg $team $seq $i
done

if ((starts>0)); then
    check_done $team $seq
fi
